#!/usr/bin/env ruby

# frozen_string_literal: true

require 'optparse'
require_relative '../lib/changelogerator'
require 'logger'

@options = {
  from: nil,
  to: nil
}

logger = Logger.new($stdout)
logger.level = Logger::WARN
logger.debug('Starting')

OptionParser.new do |opts|
  opts.banner = 'Changelogerator

This utility helps generate a template friendly context made
of the changes between 2 references on your Github project.

  Usage:
  changelogerator <repo> [options]'

  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    @options[:verbose] = v
  end

  opts.on('-fFROM', '--from=FROM', 'From Ref.') do |f|
    @options[:from] = f
  end

  opts.on('-tTO', '--to=TO', 'To Ref.') do |t|
    @options[:to] = t
  end

  opts.on('-p', '--[no-]prefix', 'Add (or not) a prefix for the repo') do |p|
    @options[:prefix] = p
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('-V', '--version', 'Show the version') do
    gemspec = "#{__dir__}/../changelogerator.gemspec"
    gem = Gem::Specification.load(gemspec)
    puts format('%<n>s v%<v>s', { v: gem.version, n: gem.name })
    exit
  end
end.parse!

@options[:repo] = ARGV[0]

def validate
  raise "Missing value for the 'repo' field" unless @options[:repo]
  raise "Missing value for the 'from' field" unless @options[:from]
  raise "Missing value for the 'to' field" unless @options[:to]

  true
end

exit 1 unless validate

logger.debug('Validation passed')
logger.debug(format(' - repo: %s', @options[:repo]))
logger.debug(format(' - from: %s', @options[:from]))
logger.debug(format(' - to: %s', @options[:to]))

cl = Changelog.new(
  @options[:repo],
  @options[:from],
  @options[:to],
  token: ENV['GITHUB_TOKEN'],
  prefix: @options[:prefix]
)

puts cl.to_json
